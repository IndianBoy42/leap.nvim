*leap.txt*
For Neovim version 0.7.0
Last change: 2022 September 18

==============================================================================
CONTENTS                                               *leap.nvim* *leap-contents*

  Usage ··························································· |leap-usage|
  Configuration ·················································· |leap-config|
  Default keymaps ········································|leap-default-keymaps|
  Custom keymaps ········································· |leap-custom-keymaps|
  Highlighting ················································ |leap-highlight|
  Events ························································· |leap-events|
  Extending Leap ············································· |leap-extensions|

==============================================================================
USAGE                                                               *leap-usage*

Command sequence in Normal mode, with the default settings:

`s|S char1 char2 <space>? (<space>|<tab>)* label?`

That is,

- invoke in the forward (`s`) or backward (`S`) direction
- enter the first character of the search pattern

  | the "beacons" are lit at this point; all potential matches (`char1` + `?`)
  | are labeled

- enter the second character of the search pattern (might short-circuit after
  this, if there is only one match)

  | certain beacons are extinguished; only `char1` + `char2` matches remain

  | the cursor automatically jumps to the first match if there are enough
  | "safe" labels (|leap-config|); pressing any other key than a group-switch
  | or a target label exits the plugin now

- optionally cycle through the groups of matches that can be labeled at once
- choose a labeled target to jump to (in the current group)

                                       *leap-operator-pending-mode* *leap-z/Z/x/X*
In Operator-pending mode, there are two different (pairs of) default motions
available, providing the necessary additional comfort and precision, since in
that case we are targeting exact positions, and can only aim once, without the
means of easy correction.

`z`/`Z` are the equivalents of Normal/Visual `s`/`S`, and behave like `/` and
`?`, that is, they are |exclusive| motions.

`x`/`X` provide missing variants for the two directions; the mnemonics could
be e(x)tend/e(X)clude:

```
abcd|                    |bcde
████e  ←  Zab    zde  →  ███de
ab██e  ←  Xab    xde  →  █████
```

In the end, `x`/`X` both push the relevant edge of the operated area forward
by 2, but there is a subtlety here:

`X` = +2
`x` = +1 |inclusive|

This is relevant when using the `v` modifier (|forced-motion|). `v` works as
expected: for example, `vx` becomes an exclusive motion, while `vz` becomes
inclusive (so ultimately they have equivalent results).

                                                            *leap-match-newline*
A character at the end of a line can be targeted by pressing `<space>` after it.
(There is no special mechanism behind this: you can set aliases for the
newline character simply by defining a set in |leap.opts.equivalence_classes|
that contains it.)

                                                             *leap-cross-window*
`gs` searches in all the other windows on the tab page. In this case, the
matches are sorted by their screen distance from the cursor, advancing in
concentric circles.

                                                                   *leap-repeat*
Pressing `<enter>` (`special_keys.repeat_search`) after invoking any of Leap's
motions sets the search pattern to the previous one.

                                                                *leap-traversal*
After entering at least one input character, `<enter>`
(`special_keys.next_aot_match`) initiates "traversal" mode, moving on to the
next match on each keypress. `<tab>` (`special_keys.prev_match`) can revert
the previous jump(s) in case you accidentally overshoot your target.

`s|S ch1 ch2? <enter> (<enter>|<tab>)*`

Tips:

- When repeating the previous search, you can immediately move on:
  `s|S <enter> <enter> ...`

- Accepting the first match after one input character is a useful shortcut in
  operator-pending mode (e.g. `dz{char}<enter>`).

- Traversal mode can be used as a substitute for normal-mode `f`/`t` motions.
  `s{char}<enter><enter>` is the same as `f{char};`, but works over multiple
  lines.

Note: If |leap.opts.safe_labels| is in use, the labels will remain available
during the whole time.

Note: For cross-window search, traversal mode is not supported (since there's
no direction to follow).

                                                               *leap-dot-repeat*
You can repeat change and delete operations with the `.` character, if
repeat.vim (https://github.com/tpope/vim-repeat) is installed.

==============================================================================
CONFIGURATION                                            *leap-config* *leap.opts*

Setting an individual option via the `opts` table directly:

`   require('leap').opts.case_sensitive = true`

Setting multiple options via the `setup` function: >

    require('leap').setup {
        case_sensitive = true,
        labels = { ... }
    }
<
    Note: These will be merged with the current/default settings. (Settings
    not mentioned here are not disturbed.)

Available options~

                                                     *leap.opts.max_aot_targets*
`max_aot_targets = nil`

    By default, the plugin shows labels and/or highlights matches right after
    the first input character. This option disables ahead-of-time displaying
    of target beacons beyond a certain number of phase 1 targets (to mitigate
    visual noise in extreme cases). Setting it to 0 disables two-step
    processing altogether.

    Note: If this option is set to some non-zero number, and there are
    `safe_labels` (i.e., autojump is possible), enabling `highlight_unlabeled`
    might be helpful: then you can be sure whether you will jump to the target
    automatically at the next keypress or you should prepare for some label to
    appear.

                                                 *leap.opts.highlight_unlabeled*
`highlight_unlabeled = false`

    Whether to highlight all unlabeled matches. (Matches covering labels will
    get highlighted anyway.)

    Note: This is only relevant if `max_aot_targets` is not 0.

                                                      *leap.opts.case_sensitive*
`case_sensitive = false`

    Whether to consider case in search patterns.

                                                   *leap.opts.equivalence_classes*
`equivalence_classes = { ' \t\r\n' }`

    A character will match any other in its equivalence class. The sets can
    either be defined as strings or tables.

    Note: Make sure to define a set containing `\n` if you want to be able to
    target characters at the end of the line. 

    Example: >
    {
      '\r\n',
      ')]}>',
      '([{<',
      { '"', "'", '`' },
    }
<
                                                         *leap.opts.safe_labels*
`safe_labels` >
    { "s", "f", "n", "u", "t", "/",
      "S", "F", "N", "L", "H", "M", "U", "G", "T", "?", "Z" }
<
    When the number of matches does not exceed the number of these "safe"
    labels plus one, the plugin jumps to the first match automatically after
    entering the pattern. Obviously, for this purpose you should choose keys
    that are unlikely to be used right after a jump!
    Setting the list to `{}` effectively disables the auto-jump feature.

    Note: Operator-pending mode ignores this, all targets (if multiple found)
    are labeled then (using the `labels` list, if not empty).

                                                              *leap.opts.labels*
`labels` >
    { "s", "f", "n",
      "j", "k", "l", "h", "o", "d", "w", "e", "m", "b",
      "u", "y", "v", "r", "g", "t", "c", "x", "/", "z",
      "S", "F", "N",
      "J", "K", "L", "H", "O", "D", "W", "E", "M", "B",
      "U", "Y", "V", "R", "G", "T", "C", "X", "?", "Z" }
<
    Target labels to be used when there are more matches than the number of
    safe labels plus one.
    Setting the list to `{}` forces auto-jump to always be on, except for
    Operator-pending mode. In this case, do not forget to set
    `special_keys.next_group` to something "safe" too.

    Heuristics behind the defaults:
    - At least the first few labels should be the same on the two lists, since
      those become muscle memory, and might be used automatically, a bit like
      [count] values.
    - Since the commands invoking the motions are mapped to left-hand keys by
      default, we tend to prioritize right-hand keys to get a better balance
      for the whole sequence on average.

                                                        *leap.opts.special_keys*
`special_keys` >
    {
      repeat_search  = '<enter>',
      next_aot_match = '<enter>',
      next_match     = {';', '<enter>'},
      prev_match     = {',', '<tab>'},
      next_group     = '<space>',
      prev_group     = '<tab>',
    }
<
    Keys captured by the plugin at runtime, to:
    - repeat with the previous input after invocation (|leap-repeat|)
    - jump to the next/previous match in traversal mode (|leap-traversal|)
    - switch to the next/previous group of matches, when there are more
      matches than labels available (|leap-usage|)

==============================================================================
DEFAULT KEYMAPS                                           *leap-default-keymaps*

The defaults can be set by calling `require('leap').set_default_keymaps()`.
Note that the function will check for conflicts with any custom mappings
created by you or other plugins, and will not overwite them, unless explicitly
told so (called with a `true` argument).

Trigger keys~

Normal mode

s{char}{char}              Jump to the first character of {char}{char}
                           in the forward direction.
S{char}{char}              Jump to the first character of {char}{char}
                           in the backward direction.

Visual mode

s{char}{char}              Extend visual selection up to and including the
                           first character of {char}{char} in the forward
                           direction.
S{char}{char}              Extend visual selection up to and including the
                           first character of {char}{char} in the backward
                           direction.

Operator-pending mode

{operator}z{char}{char}    Perform {operator} from the cursor up to the first
                           character of {char}{char} in the forward direction.
{operator}Z{char}{char}    Perform {operator} from the cursor up to and
                           including the first character of {char}{char} in
                           the backward direction. (|exclusive| motion: the
                           cursor position is not included without |o_v|.)

{operator}x{char}{char}    Perform {operator} from the cursor up to and
                           including the second character of {char}{char} in
                           the forward direction.
{operator}X{char}{char}    Perform {operator} from the cursor up to the second
                           character of {char}{char} in the backward
                           direction. (|exclusive| motion: the cursor position
                           is not included without |o_v|.)

Special keys~

<enter>                    Repeat with the previous input (after invocation);
                           jump to the next match in |leap-traversal| mode.
<space>                    Substitute for an EOL character (after the first
                           input); shift to the next group of labeled matches
                           (after the second input).
<tab>                      Revert the previous jump (|leap-traversal| mode) or
                           the previous group shift.
<esc>                      Exit Leap at any stage cleanly.

==============================================================================
CUSTOM KEYMAPS                                             *leap-custom-keymaps*

<Plug> keys are aliases for right hand sides of mappings - in our case, Lua
method calls. If you are not familiar with the concept, see |<Plug>| and
|using-<Plug>|.

Available <Plug> keys:

*<Plug>(leap-forward)*        /-like (offset: 0; as operation: exclusive)
*<Plug>(leap-backward)*       ?-like (offset: 0; as operation: exclusive)
*<Plug>(leap-forward-x)*             (offset: 1; as operation: inclusive)
*<Plug>(leap-backward-x)*            (offset: 2; as operation: exclusive)
*<Plug>(leap-cross-window)*

The keys for repeating the search, and for switching between groups of matches
can be set via |leap.opts.special_keys|.

==============================================================================
HIGHLIGHTING                                                    *leap-highlight*

Leap uses the following highlight groups that you can configure to your own
liking (using |nvim_set_hl()|):

    *LeapMatch*
        Matches that can be reached directly, without having to use a label.
        (By default, this is only used for traversal mode, or when a match
        covers a label, indicating the conflict.)

    *LeapLabelPrimary*
        The character needed to be pressed to jump to the match position,
        after the whole search pattern has been given. It appears once the
        first input has been entered, right next to the pair.

    *LeapLabelSecondary*
        If the number of matches exceeds the available target labels, the next
        group of labeled targets are shown with a different color. Those can
        be reached by pressing `<space>` (`special_keys.next_group`)
        before the label character.

    *LeapLabelSelected*
        Labels that are selected for the action in |leap-multiselect| mode.

    *LeapBackdrop*
        In some cases it might be useful or even necessary to apply certain
        settings on the rest of the area, like disabling all `gui` attributes,
        or adding a uniform grey foreground color, to make the Leap matches
        and labels more distinguishable.

In order to preserve your custom settings after changing the colorscheme, you
might want to wrap them in a function, and define an autocommand like below.
(Leap does the same, but with |:hi-default|, so it will not overwrite yours.)
>
    vim.api.nvim_create_autocmd('ColorScheme', {
      callback = function ()
        vim.api.nvim_set_hl(0, 'LeapMatch', { <def. map> })
        -- etc.
      end
    })

==============================================================================
EVENTS                                                             *leap-events*

The |User| event is triggered with the following patterns on entering/exiting
Leap (not in traversal mode):

*LeapEnter*
*LeapLeave*

Example: >
    vim.api.nvim_create_autocmd('User', {
      pattern = 'LeapEnter',
      command = 'nohlsearch',
    })
    vim.api.nvim_create_autocmd('User', {
      pattern = 'LeapLeave',
      command = 'let &hlsearch=&hlsearch',
    })
<
==============================================================================
EXTENDING LEAP                                                 *leap-extensions*

There is more to Leap than meets the eye. On a general level, you should think
of it as less of a motion plugin and more of an engine for selecting visible
targets on the screen (acquired by arbitrary means), and doing arbitrary things
with them.

There are lots of ways you can extend the plugin and bend it to your will, and
the combinations of them give you almost infinite possibilities.

Instead of using the provided `<Plug>` keys, you can also call the `leap()`
function directly:

leap({opts})                                                       *leap.leap()*
    Entry point for all |leap.nvim| actions.

    Parameters ~
        {opts} Optional parameters.
               • opts: A table just like |leap.opts|, to override any default
                 setting for the specific call.
                 E.g.: `require('leap').leap { opts = { labels = {} } }`

               • offset: Where to land with the cursor compared to the target
                 position (-1, 0, 1, 2).
               • inclusive_op: A flag indicating whether an operation should
                 behave as |inclusive|. 
               • target_windows: A list of windows (as |winid|s) to be
                 searched.
                                                           *leap-custom-targets*
               • targets: Either a list of targets, or a function returning
                 such a list. The advantage of the latter is that the function
                 will be evaluated after |LeapEnter| (that is, after setting
                 temporary editor options, etc.), so that you can even prompt
                 the user for input while already "in" Leap.

                 The elements of the list are tables of arbitrary structure,
                 with the only mandatory field being `pos` - a (1,1)-indexed
                 tuple; this is the position of the label, and also the jump
                 target, if there is no custom `action` provided. If you have
                 targets in multiple windows, you also need to provide a
                 `wininfo` field for each (|getwininfo()|). Targets can
                 represent anything with a position, like Tree-sitter nodes,
                 etc.
                                                            *leap-custom-action* 
               • action: A Lua function that will be executed by Leap in place
                 of the jump. (You could obviously implement some custom jump
                 logic here too.) Its only argument is either a target, or a
                 list of targets (in `multiselect` mode).
                                                              *leap-multiselect*
               • multiselect: A flag allowing for selecting multiple targets
                 for `action`. In this mode, you can just start picking labels
                 one after the other. You can revert the most recent pick with
                 `<backspace>`, and accept the selection with `<enter>`.

                                                  *leap.state* *leap-runtime-args*
Accessing the arguments passed to leap() ~

The arguments of the current call are always available at runtime, in the
`state.args` table.

Using |leap-events| together with the `args` table, you can customize practically
anything on a per-call basis. Keep in mind that you can even pass arbitrary
flags when calling |leap()|:
>
    function my_custom_leap_func()
        require'leap'.leap { my_custom_flag = true, ... }
    end

    vim.api.nvim_create_autocmd('User', {
      pattern = 'LeapEnter',
      callback = function ()
        if require'leap'.state.args.my_custom_flag then
          -- Implement some special logic here, that will only apply to
          -- my_custom_leap_func() (e.g., change the style of the labels),
          -- and clean up with an analogous `LeapLeave` autocommand.
        end
      end
    })
<
==============================================================================
vim:tw=78:ts=8:ft=help:norl:
